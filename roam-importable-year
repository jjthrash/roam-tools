#!/usr/bin/env ruby

require 'date'
require 'json'
require 'stringio'

require_relative 'roam_date'
require_relative 'roam_month'

def build_year_page(year)
  quarters = (1..4).map {|quarter|
    "[Q#{quarter}]([[Q#{quarter}, #{year}]])"
  }

  months = (1..12).map {|m|
    d = Date.new(year, m)
    d.strftime("[%b %y]([[%B, %Y]])")
  }

  {
    "title" => year.to_s,
    "children" => [
      {
        "string" => quarters.join(" | ")
      },
      {
        "string" => months.join(" | ")
      }
    ],
  }
end

def days_in_week(year, week)
  date = Date.ordinal(year, 7*(week-1)+1)
  sunday = RoamDate.sunday_on_or_before_date(date)
  saturday = RoamDate.saturday_on_or_after_date(date)
  (sunday..saturday)
end

def build_month_page(year, month)
  first = Date.new(year, month)
  {
    "title" => first.strftime("%B, %Y"),
    "children" => [
      RoamCalendar.roam_calendar(RoamCalendar.month_range_containing_date(first))
    ]
  }
end

def build_month_pages(year)
  (1..12).map {|month|
    build_month_page(year, month)
  }
end

def build_quarter_page(year, quarter)
  months =
    (0..2).
    map {|i| 1+(quarter-1)*3+i}.
    map {|month| Date.new(year, month, 1)}.
    map {|date| date.strftime("[%b %y]([[%B, %Y]])")}
  {
    "title" => "Q#{quarter}, #{year}",
    "children" => [
      {
        "string" => months.join(" | ")
      }
    ]
  }
end

def build_quarter_pages(year)
  (1..4).map {|quarter|
    build_quarter_page(year, quarter)
  }
end

def build_week_page(year, week)
  children = days_in_week(year, week).map {|date|
    link_text = date.strftime("%a %-d")
    "[#{link_text}]([[#{RoamDate.roam_date(date)}]])"
  }

  {
    "title" => "Week #{week}, #{Date.new(year, 1).year}",
    "children" => [
      {
        "string" => children.join(" | ")
      }
    ]
  }
end

def build_week_pages(year)
  (1..53).map {|week|
    build_week_page(year, week)
  }
end

def build_pages(year)
  year_page = build_year_page(year)
  month_pages = build_month_pages(year)
  quarter_pages = build_quarter_pages(year)
  week_pages = build_week_pages(year)

  [year_page] + month_pages + quarter_pages + week_pages
end

def doit(year)
  JSON.generate(build_pages(year.to_i))
end

if __FILE__ == $0
  puts doit(ARGV[0])
end
